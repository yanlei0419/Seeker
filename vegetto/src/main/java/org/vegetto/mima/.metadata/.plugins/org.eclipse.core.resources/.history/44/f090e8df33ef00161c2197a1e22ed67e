package org.vegetto.common.base.db.abstracts;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.vegetto.common.base.db.interfaces.IResultSetHandler;
@Deprecated
public class DBFactory extends AbstractDBFactory {

	public Serializable query(Connection conn, String sql, IResultSetHandler<Serializable> rsh, Object[] params) throws SQLException {
		return query(conn, false, sql, rsh, params);
	}

	public Serializable query(Connection conn, String sql, IResultSetHandler<Serializable> rsh) throws SQLException {
		return this.query(conn,false,sql,rsh,null);
	}

	private Serializable query(Connection conn, boolean closeConn, String sql, IResultSetHandler<Serializable> rsh, Object[] params) throws SQLException {
		if (conn == null) {
			throw new SQLException("Null connection");
		}

		if (sql == null) {
			if (closeConn) {
				close(conn);
			}
			throw new SQLException("Null SQL statement");
		}

		if (rsh == null) {
			if (closeConn) {
				close(conn);
			}
			throw new SQLException("Null ResultSetHandler");
		}

		PreparedStatement stmt = null;
		ResultSet rs = null;
		Serializable result = null;
		try {
			stmt = prepareStatement(conn, sql);
			fillStatement(stmt, params);
			rs = wrap(stmt.executeQuery());
			result = rsh.handle(rs);
		} catch (SQLException e) {
			rethrow(e, sql, params);
		} finally {
			try {
				close(rs);
			} finally {
				close(stmt);
				if (closeConn) {
					close(conn);
				}
			}
		}

		return result;
	}

	private int update(Connection conn, boolean closeConn, String sql, Object[] params) throws SQLException {
		if (conn == null) {
			throw new SQLException("Null connection");
		}

		if (sql == null) {
			if (closeConn) {
				conn.close();
			}
			throw new SQLException("Null SQL statement");
		}

		PreparedStatement stmt = null;
		int rows = 0;
		try {
			stmt = prepareStatement(conn, sql);
			fillStatement(stmt, params);
			rows = stmt.executeUpdate();
		} catch (SQLException e) {
			rethrow(e, sql, params);
		} finally {
			close(stmt);
			if (closeConn) {
				close(conn);
			}
		}

		return rows;
	}

}
