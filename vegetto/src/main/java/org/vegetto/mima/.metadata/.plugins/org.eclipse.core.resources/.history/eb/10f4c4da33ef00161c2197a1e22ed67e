ackage org.vegetto.common.base.db.abstracts;

import java.sql.Connection;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
@Deprecated
public class AbstractDBFactory {
	private volatile boolean pmdKnownBroken = false;

	public void fillStatement(PreparedStatement stmt, Object[] params) throws SQLException {
		ParameterMetaData pmd = null;
		if (!this.pmdKnownBroken) {
			pmd = stmt.getParameterMetaData();
			int stmtCount = pmd.getParameterCount();
			int paramsCount = params == null ? 0 : params.length;

			if (stmtCount != paramsCount) {
				throw new SQLException("Wrong number of parameters: expected " + stmtCount + ", was given " + paramsCount);
			}

		}

		if (params == null) {
			return;
		}

		for (int i = 0; i < params.length; i++)
			if (params[i] != null) {
				stmt.setObject(i + 1, params[i]);
			} else {
				int sqlType = 12;
				if (!this.pmdKnownBroken) {
					try {
						sqlType = pmd.getParameterType(i + 1);
					} catch (SQLException e) {
						this.pmdKnownBroken = true;
					}
				}
				stmt.setNull(i + 1, sqlType);
			}
	}

	protected PreparedStatement prepareStatement(Connection conn, String sql) throws SQLException {
		return conn.prepareStatement(sql);
	}
	

	/**
	 * 报异常时输出错误信息
	 * @param cause
	 * @param sql
	 * @param params
	 * @throws SQLException
	 */
	protected void rethrow(SQLException cause, String sql, Object[] params) throws SQLException {
		String causeMessage = cause.getMessage();
		if (causeMessage == null) {
			causeMessage = "";
		}
		StringBuffer msg = new StringBuffer(causeMessage);

		msg.append(" Query: ");
		msg.append(sql);
		msg.append(" Parameters: ");

		if (params == null)
			msg.append("[]");
		else {
			msg.append(Arrays.deepToString(params));
		}

		SQLException e = new SQLException(msg.toString(), cause.getSQLState(), cause.getErrorCode());

		e.setNextException(cause);

		throw e;
	}

	protected ResultSet wrap(ResultSet rs) {
		return rs;
	}
	public void close(PreparedStatement ps) throws SQLException{
		if(ps!=null){
			ps.close();
		}
	}
	/**
	 * 关闭结果集
	 * @param rs
	 * @throws SQLException
	 */
	public void close(ResultSet rs) throws SQLException{
		if(rs!=null){
			rs.close();
		}
	}
	/**
	 * 关闭连接
	 * @param conn
	 * @throws SQLException
	 */
	public void close(Connection conn) throws SQLException{
		if(conn!=null){
			conn.close();
		}
	}
}
